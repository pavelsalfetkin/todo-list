// получим доступ к DOM-элементамconst todoForm = document.getElementById('todo-form'); // формаconst addInput = document.getElementById('add-input'); // поле где будет название задачиconst todoList = document.getElementById('todo-list'); // список задачьconst headButton = document.getElementById('head-button'); // кнопка edit в шапке темыconst noteCount = document.getElementById('note-count'); // счетчик заметокconst todoItems = document.querySelectorAll('.todo-item'); // список названия задачь// эта функция создает новую заметкуconst createTodoItem = (title) => {	const checkbox = document.createElement('input'); // создадим элемент <input>	checkbox.type = 'checkbox'; // присвоим ему значение type = "checkbox"	checkbox.className = 'checkbox'; // присвоим class = "checkbox"	const label = document.createElement('label');	label.innerText = title; // заполним лейбл текстом	label.className = 'title';	const editInput = document.createElement('input');	editInput.type = 'text';	editInput.className = 'textfield';	const editButton = document.createElement('button');	editButton.innerText = '/';	editButton.className = 'edit';	const deleteButton = document.createElement('button');	deleteButton.innerText = '×';	deleteButton.className = 'delete';	const listItem = document.createElement('li');	listItem.className = 'todo-item';	listItem.appendChild(checkbox);	listItem.appendChild(label);	listItem.appendChild(editInput);	listItem.appendChild(editButton);	listItem.appendChild(deleteButton);	bindEvents(listItem);	return listItem;};// добавить новую заметкуconst addTodoItem = (event) => {	event.preventDefault();	if (addInput.value === '') return alert('Введите текст новой заметки!'); // проверка на пустое поле	const todoItem = createTodoItem(addInput.value); // создадим новый элемент	todoList.appendChild(todoItem);	addInput.value = '';};const bindEvents = (todoItem) => {	const checkbox = todoItem.querySelector('.checkbox');	const editButton = todoItem.querySelector('button.edit');	const deleteButton = todoItem.querySelector('button.delete');	checkbox.addEventListener('change', toggleTodoItem);	editButton.addEventListener('click', editTodoItem);	deleteButton.addEventListener('click', deleteTodoItem);};const toggleTodoItem = ({ target }) => {	const listItem = target.parentNode;	listItem.classList.toggle('completed');};const editTodoItem = ({ target }) => {	const listItem = target.parentNode;	const title = listItem.querySelector('.title');	const editInput = listItem.querySelector('.textfield');	const isEditing = listItem.classList.contains('editing');	if (isEditing) {		title.innerText = editInput.value;		target.innerText = '/';	} else {		editInput.value = title.innerText;		target.innerText = 'ok';	}	listItem.classList.toggle('editing');};const deleteTodoItem = ({ target }) => {	const listItem = target.parentNode;	todoList.removeChild(listItem);};const editHeadTopic = ({ target }) => {		const listItem = target.parentNode; // получаем доступ к родителю	const title = listItem.querySelector('.header_center_head_title'); // лэйбл	const editInput = listItem.querySelector('.header_center_head_textfield'); // инпут	const isEditing = listItem.classList.contains('editing'); // проверка есть ли у элемента класс	if (isEditing) {		title.innerText = editInput.value;		target.innerText = '/';	} else {		editInput.value = title.innerText;		target.innerText = 'ok';	}	listItem.classList.toggle('editing'); // присвоит класс editing};const noteCountFunction = () => noteCount.innerText = todoList.childElementCount;// самовызывающаяся стрелочная анонимная функция(() => {	todoForm.addEventListener('submit', addTodoItem);	todoItems.forEach(item => bindEvents(item));	headButton.addEventListener('click', editHeadTopic);	setInterval(noteCountFunction, 1000);})();